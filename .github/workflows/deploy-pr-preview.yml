# .github/workflows/pr-preview.yml
name: Deploy PR previews

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed

concurrency: preview-${{ github.ref }}

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      pages: write
      id-token: write
    steps:
      # Checkout the PR branch
      - name: Checkout
        uses: actions/checkout@v4

      # Detect project type
      - name: Detect project type
        if: github.event.action != 'closed'
        id: detect
        run: |
          if [ -f "package.json" ]; then
            echo "Project appears to be Node.js based (Next.js/React/etc)"
            echo "type=node" >> $GITHUB_OUTPUT
          elif [ -f "Gemfile" ] || [ -f "_config.yml" ]; then
            echo "Project appears to be Jekyll based"
            echo "type=jekyll" >> $GITHUB_OUTPUT
          else
            echo "Project type unclear, checking main branch..."
            
            # Fetch main branch to check
            git fetch origin main --depth=1
            
            if git show origin/main:package.json > /dev/null 2>&1; then
              echo "Main branch has package.json - Node.js project"
              echo "type=node" >> $GITHUB_OUTPUT
              # Get package files from main if not in PR
              if [ ! -f "package.json" ]; then
                git show origin/main:package.json > package.json
                git show origin/main:package-lock.json > package-lock.json 2>/dev/null || true
              fi
            elif git show origin/main:Gemfile > /dev/null 2>&1; then
              echo "Main branch has Gemfile - Jekyll project"
              echo "type=jekyll" >> $GITHUB_OUTPUT
              # Get Gemfile from main if not in PR
              if [ ! -f "Gemfile" ]; then
                git show origin/main:Gemfile > Gemfile
                git show origin/main:Gemfile.lock > Gemfile.lock 2>/dev/null || true
              fi
            else
              echo "Could not determine project type"
              echo "type=unknown" >> $GITHUB_OUTPUT
            fi
          fi

      # Setup Node.js for Next.js/React projects
      - name: Setup Node.js
        if: github.event.action != 'closed' && steps.detect.outputs.type == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Setup Ruby for Jekyll projects  
      - name: Setup Ruby
        if: github.event.action != 'closed' && steps.detect.outputs.type == 'jekyll'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'

      # Build for Node.js projects
      - name: Build Node.js project
        if: github.event.action != 'closed' && steps.detect.outputs.type == 'node'
        run: |
          npm ci || npm install
          
          # For Next.js, we need to export static files
          if grep -q "next" package.json; then
            # Set base path for Next.js
            export NEXT_PUBLIC_BASE_PATH="/pr-preview/pr-${{ github.event.pull_request.number }}"
            
            # Try to build and export
            npm run build || npx next build
            npx next export -o _site || npm run export || echo "Export not configured"
            
            # If no export, check for out directory from build
            if [ ! -d "_site" ] && [ -d "out" ]; then
              mv out _site
            elif [ ! -d "_site" ] && [ -d ".next" ]; then
              echo "Next.js app needs static export configuration"
              mkdir -p _site
              echo "<html><body>This Next.js app needs static export configuration</body></html>" > _site/index.html
            fi
          else
            # Regular Node.js build
            npm run build || echo "No build script"
            
            # Find output directory
            if [ -d "dist" ]; then
              mv dist _site
            elif [ -d "build" ]; then
              mv build _site  
            elif [ -d "public" ]; then
              mv public _site
            else
              mkdir -p _site
              cp -r . _site/ 2>/dev/null || true
            fi
          fi

      # Build for Jekyll projects
      - name: Build Jekyll project
        if: github.event.action != 'closed' && steps.detect.outputs.type == 'jekyll'
        run: |
          gem install bundler
          bundle install
          bundle exec jekyll build --baseurl "/pr-preview/pr-${{ github.event.pull_request.number }}"
        env:
          JEKYLL_ENV: production

      # Handle unknown project types
      - name: Handle static files
        if: github.event.action != 'closed' && steps.detect.outputs.type == 'unknown'
        run: |
          echo "Could not determine project type, assuming static files"
          mkdir -p _site
          cp -r . _site/ 2>/dev/null || true

      # Deploy the preview to GitHub Pages
      - name: Deploy preview
        uses: rossjrw/pr-preview-action@v1
        with:
          source-dir: ./_site
          preview-branch: gh-pages
          umbrella-dir: pr-preview
          action: auto

      # Post comment with preview URL
      - name: Get preview URL
        if: github.event.action != 'closed'
        id: preview-url
        run: |
          echo "url=https://serpdownloaders.github.io/pr-preview/pr-${{ github.event.pull_request.number }}/" >> $GITHUB_OUTPUT

      - name: Comment PR
        if: github.event.action != 'closed'
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.preview-url.outputs.url }}';
            const projectType = '${{ steps.detect.outputs.type }}';
            const body = `### ðŸš€ Deploy Preview ready!\n\nðŸ”— **Preview URL:** ${url}\nðŸ“¦ **Detected Project Type:** ${projectType}\n\n*This preview will be automatically updated when you push new commits to this PR.*`;
            
            // Find and update existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Deploy Preview ready')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
